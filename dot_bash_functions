#!/bin/bash

# https://man7.org/linux/man-pages/man3/syslog.3.html
# https://man7.org/linux/man-pages/man1/logger.1.html

export DF_VERBOSE_PREFERENCE="silent"

# Toggle verbosity
function df::verbose() {
  export DF_VERBOSE_PREFERENCE="verbose"
}
function df::quiet() {
  export DF_VERBOSE_PREFERENCE="silent"
}

function df::log() {
    local message="$1"
    local priority="${2:-user.info}"
    local verbose_preference="${3:-$DF_VERBOSE_PREFERENCE}"

    # Get source filename of function or script, then get basename
    local source_file="${BASH_SOURCE[1]:-$0}"
    local source_name=$(basename "$source_file")
    # Get name of calling function or default to "script"
    local calling_function="${FUNCNAME[1]:-script}"
    local tag="df_log:${calling_function}:${source_name}"
    local logger_cmd=(logger -p "$priority" -t "$tag")
    # if verbose, add -s option to also log to stderr
    [[ "$verbose_preference" == "verbose" ]] && logger_cmd+=(-s)

    local formatted_message="[${calling_function}@${source_name}] $message"
    "${logger_cmd[@]}" "$formatted_message"
}

function df::glog() {
    # Column 1: %C(auto)%h - auto color short commit hash
    # Column 2: %<(14)%ar - left aligned, pad 14 characters, relative daterelative date (left aligned, pad with 14 characters
    # Column 3: %s - commit message
    git log --pretty='format:%C(auto)%h %<(14)%ar %s' --max-count=5
}

[[ $(command -v df::log) ]] && {
    df::log "bash_functions sourced"
}

function df::gacp() {
  local msg=${1:?"commit message is required"}
  local branch=$(git symbolic-ref --short HEAD)
  git add . && git commit -m "$msg" && git push origin $(git symbolic-ref --short HEAD)
}